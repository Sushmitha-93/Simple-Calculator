{"version":3,"sources":["components/buttons.jsx","App.js","components/heading.jsx","components/outputScreenRow.jsx","components/outputScreen.jsx","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Buttons","props","a","createElement","className","buttonClass","class","getButtonClass","style","minWidth","onClick","onInputClick","label","App","state","expr","question","answer","handleInputClick","input","console","log","ans","eval","_this","toString","err","setState","undefined","str","substr","length","ques","react__WEBPACK_IMPORTED_MODULE_5___default","_components_heading__WEBPACK_IMPORTED_MODULE_9__","_components_outputScreen__WEBPACK_IMPORTED_MODULE_6__","this","_components_buttons__WEBPACK_IMPORTED_MODULE_7__","Component","HeadingComponent","OutputScreenRow","_ref","value","react_default","type","readOnly","OutputScreen","components_outputScreenRow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uFAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,IAwBeG,IApBC,SAAAC,GACd,OACEH,EAAAI,EAAAC,cAAA,UACEC,UAUJ,WACE,IAAIC,EAAc,wCAElB,OADAA,GAAeJ,EAAMK,MAZRC,GACXC,MAAO,CAAEC,SAAUR,EAAMQ,UACzBC,QAAS,WACPT,EAAMU,aAAaV,EAAMW,SAGV,WAAhBX,EAAMW,MAAqBd,EAAAI,EAAAC,cAAA,KAAGG,MAAM,qBAAwBL,EAAMW,0zCCPnEC,6pBACJC,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,OAAQ,GACRR,SAAU,EACVH,MAAO,UAGTY,iBAAmB,SAAAC,OAEjB,OADAC,QAAQC,IAAI,wBAAyBF,OAC7BA,OACN,IAAK,IACH,IACE,IAAIG,IAAMC,KAAKC,MAAKV,MAAME,UAAUS,WACpC,MAAOC,KACPF,MAAKG,SAAS,CAAEV,OAAQ,qBAEdW,IAARN,IAAmBE,MAAKG,SAAS,CAAEV,OAAQ,eAE1CO,MAAKG,SAAS,CAAEV,OAAQK,IAAKN,SAAU,GAAID,KAAMO,MACtD,MAEF,IAAK,QACHF,QAAQC,IAAI,cACZG,MAAKG,SAAS,CAAEX,SAAU,GAAIC,OAAQ,GAAIF,KAAM,KAChD,MAEF,IAAK,SACHK,QAAQC,IAAI,eACZ,IAAIQ,IAAML,MAAKV,MAAMC,KACrBc,IAAMA,IAAIC,OAAO,EAAGD,IAAIE,OAAS,GACjCP,MAAKG,SAAS,CAAEX,SAAUa,IAAKZ,OAAQ,GAAIF,KAAMc,MACjDT,QAAQC,IAAIG,MAAKV,MAAME,UACvB,MAEF,QACE,IAAIgB,KAAOR,MAAKV,MAAMC,KAAOI,MAC7BK,MAAKG,SAAS,CAAEX,SAAUgB,KAAMf,OAAQ,GAAIF,KAAMiB,OAClDZ,QAAQC,IAAIG,MAAKV,MAAME,kUAM3B,OACEiB,2CAAA/B,EAAAC,cAAA,OAAKC,UAAU,eACb6B,2CAAA/B,EAAAC,cAAC+B,iDAAA,EAAD,MACAD,2CAAA/B,EAAAC,cAAA,WAEA8B,2CAAA/B,EAAAC,cAAA,OAAKC,UAAU,8BACb6B,2CAAA/B,EAAAC,cAAA,OAAKC,UAAU,8CACb6B,2CAAA/B,EAAAC,cAACgC,sDAAA,EAAD,CACEnB,SAAUoB,KAAKtB,MAAME,SACrBC,OAAQmB,KAAKtB,MAAMG,SAErBgB,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,OACT2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,aACT2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,QACPD,aAAcyB,KAAKlB,iBACnBT,SAAU,GACVH,MAAO,UAET2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,SACPH,SAAU,GACVE,aAAcyB,KAAKlB,iBACnBZ,MAAO,cAET2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,IACPD,aAAcyB,KAAKlB,iBACnBZ,MAAO,eAIb2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,OACT2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,aACT2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,IACPD,aAAcyB,KAAKlB,iBACnBZ,MAAO,eAIb2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,OACT2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,aACT2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,IACPD,aAAcyB,KAAKlB,iBACnBZ,MAAO,eAIb2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,OACT2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,aACT2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CACEzB,MAAO,IACPD,aAAcyB,KAAKlB,iBACnBZ,MAAO,eAIb2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,OACT2B,2CAAA/B,EAAAC,cAAA,OAAKG,MAAM,aACT2B,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,mBACxCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,KAAMD,aAAcyB,KAAKlB,mBACzCe,2CAAA/B,EAAAC,cAACkC,iDAAA,EAAD,CAASzB,MAAO,IAAKD,aAAcyB,KAAKlB,iCAtHtCoB,8CAgIHzB,2DCtIf,IAAAjB,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAMe2C,IAJU,WACvB,OAAOzC,EAAAI,EAAAC,cAAA,gGCSMqC,SARS,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACzB,OACEC,EAAAzC,EAAAC,cAAA,OAAKC,UAAU,mBACbuC,EAAAzC,EAAAC,cAAA,SAAOC,UAAU,oBAAoBwC,KAAK,OAAOC,UAAQ,EAACH,MAAOA,OCMxDI,IATM,SAAA7C,GACnB,OACE0C,EAAAzC,EAAAC,cAAA,OAAKC,UAAU,aACbuC,EAAAzC,EAAAC,cAAC4C,EAAD,CAAiBL,MAAOzC,EAAMe,WAC9B2B,EAAAzC,EAAAC,cAAC4C,EAAD,CAAiBL,MAAOzC,EAAMgB,uLCIhB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOX,EAAAzC,EAAAC,cAACU,EAAA,EAAD,MAAS0C,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1438aafe.chunk.js","sourcesContent":["import React from \"react\"; //imr\r\nimport \"./buttons.css\";\r\n\r\n//Stateless functional component - sfc\r\nconst Buttons = props => {\r\n  return (\r\n    <button\r\n      className={getButtonClass()}\r\n      style={{ minWidth: props.minWidth }}\r\n      onClick={() => {\r\n        props.onInputClick(props.label);\r\n      }}\r\n    >\r\n      {props.label === \"Delete\" ? <i class=\"fas fa-backspace\" /> : props.label}\r\n    </button>\r\n  );\r\n\r\n  function getButtonClass() {\r\n    let buttonClass = \"btn btn-secondary calculator-buttons \";\r\n    buttonClass += props.class;\r\n    return buttonClass;\r\n  }\r\n};\r\n\r\nexport default Buttons;\r\n","import React, { Component } from \"react\";\r\nimport OutputScreen from \"./components/outputScreen\";\r\nimport Buttons from \"./components/buttons\";\r\nimport \"./App.css\";\r\nimport HeadingComponent from \"./components/heading\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    expr: \"\",\r\n    question: \"\",\r\n    answer: \"\",\r\n    minWidth: 0,\r\n    class: \"\"\r\n  };\r\n\r\n  handleInputClick = input => {\r\n    console.log(\"Handle click function\", input);\r\n    switch (input) {\r\n      case \"=\":\r\n        try {\r\n          var ans = eval(this.state.question).toString();\r\n        } catch (err) {\r\n          this.setState({ answer: \"Math error!\" });\r\n        }\r\n        if (ans === undefined) this.setState({ answer: \"Math Error\" });\r\n        // 6*= will give \"Undefined\" amd throw error if we try to set \"Undefined\" for answer\r\n        else this.setState({ answer: ans, question: \"\", expr: ans });\r\n        break;\r\n\r\n      case \"Clear\":\r\n        console.log(\"case Clear\");\r\n        this.setState({ question: \"\", answer: \"\", expr: \"\" });\r\n        break;\r\n\r\n      case \"Delete\":\r\n        console.log(\"case Delete\");\r\n        let str = this.state.expr;\r\n        str = str.substr(0, str.length - 1);\r\n        this.setState({ question: str, answer: \"\", expr: str });\r\n        console.log(this.state.question);\r\n        break;\r\n\r\n      default:\r\n        var ques = this.state.expr + input;\r\n        this.setState({ question: ques, answer: \"\", expr: ques });\r\n        console.log(this.state.question);\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <HeadingComponent />\r\n        <br />\r\n        {/* To bring content to center */}\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"calculator border border-secondary rounded\">\r\n            <OutputScreen\r\n              question={this.state.question}\r\n              answer={this.state.answer}\r\n            />\r\n            <div class=\"row\">\r\n              <div class=\"btn-group\">\r\n                <Buttons\r\n                  label={\"Clear\"}\r\n                  onInputClick={this.handleInputClick}\r\n                  minWidth={78}\r\n                  class={\"clear\"}\r\n                />\r\n                <Buttons\r\n                  label={\"Delete\"}\r\n                  minWidth={71}\r\n                  onInputClick={this.handleInputClick}\r\n                  class={\"backSpace\"}\r\n                />\r\n                <Buttons\r\n                  label={\"/\"}\r\n                  onInputClick={this.handleInputClick}\r\n                  class={\"operator\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"btn-group\">\r\n                <Buttons label={\"7\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"8\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"9\"} onInputClick={this.handleInputClick} />\r\n                <Buttons\r\n                  label={\"*\"}\r\n                  onInputClick={this.handleInputClick}\r\n                  class={\"operator\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"btn-group\">\r\n                <Buttons label={\"4\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"5\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"6\"} onInputClick={this.handleInputClick} />\r\n                <Buttons\r\n                  label={\"-\"}\r\n                  onInputClick={this.handleInputClick}\r\n                  class={\"operator\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"btn-group\">\r\n                <Buttons label={\"1\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"2\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"3\"} onInputClick={this.handleInputClick} />\r\n                <Buttons\r\n                  label={\"+\"}\r\n                  onInputClick={this.handleInputClick}\r\n                  class={\"operator\"}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"btn-group\">\r\n                <Buttons label={\".\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"0\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"00\"} onInputClick={this.handleInputClick} />\r\n                <Buttons label={\"=\"} onInputClick={this.handleInputClick} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\"; //imr\r\n\r\nconst HeadingComponent = () => {\r\n  return <h1>Simple Calculator using React</h1>;\r\n};\r\n\r\nexport default HeadingComponent;\r\n","import React from \"react\"; //imr\r\nimport \"./outputScreenRow.css\";\r\n\r\n//Stateless Functional Component - sfc\r\nconst OutputScreenRow = ({ value }) => {\r\n  return (\r\n    <div className=\"outputScreenRow\">\r\n      <input className=\"output-screen-row\" type=\"text\" readOnly value={value} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputScreenRow;\r\n","import React from \"react\"; //imr\r\nimport OutputScreenRow from \"./outputScreenRow\";\r\n\r\n//Stateless functional component - sfc\r\nconst OutputScreen = props => {\r\n  return (\r\n    <div className=\"outScreen\">\r\n      <OutputScreenRow value={props.question} />\r\n      <OutputScreenRow value={props.answer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputScreen;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}